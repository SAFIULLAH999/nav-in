// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums as strings for SQLite compatibility
// ConnectionStatus: PENDING, ACCEPTED, BLOCKED
// JobType: FULL_TIME, PART_TIME, CONTRACT, INTERNSHIP, FREELANCE, TEMPORARY

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String    // Hashed password for authentication
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  bio           String?
  title         String?   // headline
  company       String?
  location      String?
  website       String?
  skills        String?   // JSON string of skill strings
  avatar        String?   // profile picture URL
  summary       String?   // professional summary
  socialLinks   String?   // JSON string for social media links
  role          String    @default("USER") // User role for authorization
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  openToStatus  String?   // Current "Open To" status
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts              Account[]
  sessions              Session[]
  posts                 Post[]
  likes                 Like[]
  comments              Comment[]
  sentConnections       Connection[] @relation("ConnectionSender")
  receivedConnections   Connection[] @relation("ConnectionReceiver")
  following             Follow[] @relation("FollowFollowing")
  followers             Follow[] @relation("FollowFollower")
  jobs                  Job[]
  applications          Application[]
  sentMessages          Message[] @relation("MessageSender")
  receivedMessages      Message[] @relation("MessageReceiver")
  notifications         Notification[]
  experiences           Experience[]
  education             Education[]
  shares                Share[]
  refreshTokens         RefreshToken[]
  consents              UserConsent[]
  gdprRequests          GDPRRequest[]
  analyticsEvents       AnalyticsEvent[]
  companyPosts          CompanyPost[]
  companyMemberships    CompanyEmployee[]
  passwordResetTokens   PasswordResetToken[]
  userSkills            UserSkill[]
  documents             Document[]
  generatedURLs         GeneratedURL[]
  sentRecruiterMessages RecruiterMessage[] @relation("RecruiterMessageSender")
  receivedRecruiterMessages RecruiterMessage[] @relation("RecruiterMessageReceiver")
  messageTemplates      MessageTemplate[]
  openToStatuses        OpenTo[]
  createdQuizzes        Quiz[] @relation("QuizCreator")
  quizAttempts          QuizAttempt[]
  createdGroups         Group[] @relation("GroupCreator")
  groupMemberships      GroupMembership[]
  groupPosts            GroupPost[]
  articles              Article[]
  articleComments       ArticleComment[]
  articleLikes          ArticleLike[]
  articleShares         ArticleShare[]
  articleBookmarks      ArticleBookmark[]
  atsIntegrations       AtsIntegration[]
  scrapingSessions      ScrapingSession[]
  scrapingQueue         JobScrapingQueue[]
}

model OpenTo {
  id          String   @id @default(cuid())
  userId      String
  type        String   // "WORK", "HIRING", "FREELANCE", "MENTORSHIP", "COLLABORATION", etc.
  isActive    Boolean  @default(true)
  visibility  String   @default("PUBLIC") // PUBLIC, CONNECTIONS_ONLY, PRIVATE
  message     String?  // Custom message with the status
  expiresAt   DateTime? // Optional expiration date
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  coverImage  String?
  isPrivate   Boolean  @default(false)
  isActive    Boolean  @default(true)
  memberCount Int      @default(0)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator      User             @relation("GroupCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  memberships  GroupMembership[]
  posts        GroupPost[]
  count        GroupCount?

  @@index([slug])
}

model GroupMembership {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  role      String   @default("MEMBER") // ADMIN, MODERATOR, MEMBER
  status    String   @default("ACTIVE") // ACTIVE, PENDING, BLOCKED
  joinedAt  DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model GroupPost {
  id        String   @id @default(cuid())
  content   String
  image     String?
  video     String?
  authorId  String
  groupId   String
  likes     Int      @default(0)
  comments  Int      @default(0)
  shares    Int      @default(0)
  isPinned  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  group  Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model GroupCount {
  id            String @id @default(cuid())
  groupId       String @unique
  posts         Int    @default(0)
  members       Int    @default(0)
  activeMembers Int    @default(0)

  group  Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Article {
  id            String   @id @default(cuid())
  title         String
  subtitle      String?
  content       String   // Rich text content
  excerpt       String?  // Short summary for previews
  coverImage    String?
  tags          String?  // JSON array of tags
  category      String?  // Article category (e.g., "Technology", "Career", "Business")
  readTime      Int?     // Estimated reading time in minutes
  isPublished   Boolean  @default(false)
  isFeatured    Boolean  @default(false)
  views         Int      @default(0)
  likesCount    Int      @default(0)
  commentsCount Int      @default(0)
  sharesCount   Int      @default(0)
  authorId      String
  publishedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  author    User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  ArticleComment[]
  likes     ArticleLike[]
  shares    ArticleShare[]
  bookmarks ArticleBookmark[]

  @@index([authorId, isPublished])
  @@index([isPublished, publishedAt])
  @@index([category, isPublished])
}

model ArticleComment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  articleId String
  parentId  String?  // For nested comments
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  article  Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  parent   ArticleComment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies  ArticleComment[] @relation("CommentReplies")
}

model ArticleLike {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
}

model ArticleShare {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
}

model ArticleBookmark {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
}

model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?
  skillId     String
  difficulty  String   @default("INTERMEDIATE") // BEGINNER, INTERMEDIATE, ADVANCED
  timeLimit   Int?     // Time limit in minutes
  passingScore Int    @default(70) // Percentage needed to pass
  isActive    Boolean  @default(true)
  createdBy   String   // User ID who created the quiz
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  skill     Skill           @relation(fields: [skillId], references: [id], onDelete: Cascade)
  creator   User            @relation("QuizCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  questions QuizQuestion[]
  attempts  QuizAttempt[]
}

model QuizQuestion {
  id        String   @id @default(cuid())
  quizId    String
  question  String
  type      String   @default("MULTIPLE_CHOICE") // MULTIPLE_CHOICE, TRUE_FALSE, SHORT_ANSWER
  options   String?  // JSON array of options for multiple choice
  correctAnswer String // The correct answer
  points    Int      @default(1)
  order     Int      // Order of question in quiz
  explanation String? // Explanation for the correct answer
  createdAt DateTime @default(now())

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model QuizAttempt {
  id            String   @id @default(cuid())
  userId        String
  quizId        String
  score         Int      // Percentage score (0-100)
  totalPoints   Int      // Total possible points
  earnedPoints  Int      // Points earned
  answers       String   // JSON object with questionId -> userAnswer
  timeSpent     Int      // Time spent in seconds
  passed        Boolean  @default(false)
  completedAt   DateTime @default(now())
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@unique([userId, quizId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, token])
}

model Skill {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String?  // e.g., "Technical", "Soft Skills", "Language"
  createdAt   DateTime @default(now())

  // Relations
  userSkills UserSkill[]
  quizzes    Quiz[]
}

model UserSkill {
  id        String   @id @default(cuid())
  userId    String
  skillId   String
  level     String   @default("INTERMEDIATE") // BEGINNER, INTERMEDIATE, ADVANCED, EXPERT
  createdAt DateTime @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)

  // Relations
  givenEndorsements   Endorsement[] @relation("EndorsementGiver")
  receivedEndorsements Endorsement[] @relation("EndorsementReceiver")

  @@unique([userId, skillId])
}

model Endorsement {
  id          String   @id @default(cuid())
  giverId     String   // User who gave the endorsement
  receiverId  String   // User who received the endorsement
  skillId     String   // Which skill was endorsed
  message     String?  // Optional message with endorsement
  createdAt   DateTime @default(now())

  giver    UserSkill @relation("EndorsementGiver", fields: [giverId], references: [id], onDelete: Cascade)
  receiver UserSkill @relation("EndorsementReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([giverId, receiverId, skillId])
}

model PostAnalytics {
  id            String   @id @default(cuid())
  postId        String   @unique
  impressions   Int      @default(0)
  views         Int      @default(0)
  likes         Int      @default(0)
  comments      Int      @default(0)
  shares        Int      @default(0)
  engagementRate Float   @default(0)
  lastUpdated   DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Post {
  id        String   @id @default(cuid())
  content   String
  image     String?
  video     String?
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author      User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes       Like[]
  comments    Comment[]
  shares      Share[]
  analytics   PostAnalytics?
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  postId    String
  parentId  String?  // For nested comments
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")
}

model Share {
  id     String @id @default(cuid())
  userId String
  postId String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Connection {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  status     String @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender   User @relation("ConnectionSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ConnectionReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String   // User who is following
  followingId String   // User being followed
  createdAt   DateTime @default(now())

  follower  User @relation("FollowFollower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("FollowFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Company {
  id          String   @id @default(cuid())
  name        String
  description String?
  website     String?
  logo        String?   // Company logo URL
  industry    String?
  size        String?   // Company size (startup, SMB, enterprise)
  location    String?
  foundedYear Int?
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employees   CompanyEmployee[]
  jobs        Job[]
  posts       CompanyPost[]
  atsIntegrations AtsIntegration[]
}

model CompanyEmployee {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  role      String   // Job title/role at company
  isAdmin   Boolean  @default(false) // Can manage company page
  joinedAt  DateTime @default(now())
  leftAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
}

model Job {
  id           String   @id @default(cuid())
  title        String
  description  String
  companyName  String   // Company name (denormalized for search)
  location     String
  type         String   @default("FULL_TIME")
  salaryMin    Int?
  salaryMax    Int?
  requirements String?  // JSON string of requirement strings
  benefits     String?
  skills       String?  // JSON string of required skills
  experience   String?  // Experience level required
  authorId     String   // Recruiter who posted
  companyId    String?  // Associated company page (optional)
  sourceId     String?  // Job source for scraped jobs
  isActive     Boolean  @default(true)
  isRemote     Boolean  @default(false)
  applicationDeadline DateTime?
  views        Int      @default(0)
  applicationsCount Int @default(0)
  isScraped    Boolean  @default(false)
  lastScraped  DateTime?
  expiresAt    DateTime? // When the job posting expires
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  author       User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  company      Company?      @relation(fields: [companyId], references: [id], onDelete: SetNull)
  applications Application[]
  messageThreads MessageThread[]
  recruiterMessages RecruiterMessage[]
  scrapingSource JobSource?  @relation("JobScrapingSource", fields: [sourceId], references: [id], onDelete: SetNull)
}

model CompanyPost {
  id        String   @id @default(cuid())
  content   String
  image     String?
  video     String?
  companyId String
  authorId  String   // Employee who posted
  likes     Int      @default(0)
  comments  Int      @default(0)
  shares    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  author  User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Application {
  id        String   @id @default(cuid())
  userId    String
  jobId     String
  resume    String?  // URL to uploaded resume
  coverLetter String?
  status    String @default("PENDING")
  appliedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
}

model Message {
  id         String   @id @default(cuid())
  content    String
  senderId   String
  receiverId String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  sender   User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model MessageTemplate {
  id         String   @id @default(cuid())
  recruiterId String
  name       String
  subject    String
  content    String
  category   String   @default("custom")
  variables  String?  // JSON array of variable names
  isPublic   Boolean  @default(false)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  recruiter User @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
}

model MessageThread {
  id            String   @id @default(cuid())
  participants  String   // JSON array of user IDs
  jobId         String?
  subject       String
  lastMessage   String?
  lastMessageAt DateTime @default(now())
  unreadCount   String   @default("{}") // JSON object with userId -> count
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  job      Job?             @relation(fields: [jobId], references: [id], onDelete: Cascade)
  messages RecruiterMessage[]
}

model RecruiterMessage {
  id         String   @id @default(cuid())
  recruiterId String
  candidateId String
  jobId       String?
  subject     String
  content     String
  type        String   @default("general")
  status      String   @default("sent")
  isTemplate  Boolean  @default(false)
  templateId  String?
  threadId    String
  metadata    String?  // JSON string for additional data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  recruiter User           @relation("RecruiterMessageSender", fields: [recruiterId], references: [id], onDelete: Cascade)
  candidate User           @relation("RecruiterMessageReceiver", fields: [candidateId], references: [id], onDelete: Cascade)
  job       Job?           @relation(fields: [jobId], references: [id], onDelete: Cascade)
  thread    MessageThread  @relation(fields: [threadId], references: [id], onDelete: Cascade)
}

model Notification {
  id      String   @id @default(cuid())
  userId  String
  type    String @default("LIKE")
  title   String
  message String
  isRead  Boolean  @default(false)
  data    String?   // JSON string for additional data for the notification
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AtsIntegration {
  id              String   @id @default(cuid())
  companyId       String   // Company that owns this integration
  name            String   // Human-readable name for the integration
  provider        String   // ATS provider (e.g., "greenhouse", "lever", "workday", "custom")
  apiEndpoint     String?  // Base URL for ATS API
  apiKey          String?  // Encrypted API key
  accessToken     String?  // Encrypted access token
  refreshToken    String?  // Encrypted refresh token
  webhookSecret   String?  // For webhook verification
  webhookUrl      String?  // Webhook URL for ATS callbacks
  configuration   String?  // JSON configuration for provider-specific settings
  status          String   @default("INACTIVE") // INACTIVE, ACTIVE, ERROR, SYNCING
  lastSyncAt      DateTime?
  syncFrequency   Int      @default(3600) // Sync interval in seconds (default 1 hour)
  isActive        Boolean  @default(true)
  createdBy       String   // User who created the integration
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  creator   User        @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  syncLogs  AtsSyncLog[]
  jobMappings AtsJobMapping[]
  candidateMappings AtsCandidateMapping[]

  @@unique([companyId, provider])
}

model AtsSyncLog {
  id            String   @id @default(cuid())
  integrationId String
  syncType      String   // FULL, INCREMENTAL, WEBHOOK
  status        String   // SUCCESS, ERROR, PARTIAL
  recordsProcessed Int    @default(0)
  recordsCreated   Int    @default(0)
  recordsUpdated   Int    @default(0)
  recordsFailed    Int    @default(0)
  errorMessage     String?
  startedAt        DateTime @default(now())
  completedAt      DateTime?
  metadata         String?  // JSON metadata about the sync

  integration AtsIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
}

model AtsJobMapping {
  id              String   @id @default(cuid())
  integrationId   String
  atsJobId        String   // Job ID in the external ATS
  platformJobId   String   // Job ID in our platform
  lastSyncedAt    DateTime @default(now())
  syncStatus      String   @default("ACTIVE") // ACTIVE, OUTDATED, ERROR
  mappingData     String?  // JSON field mapping configuration

  integration AtsIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@unique([integrationId, atsJobId])
  @@unique([integrationId, platformJobId])
}

model AtsCandidateMapping {
  id                String   @id @default(cuid())
  integrationId     String
  atsCandidateId    String   // Candidate ID in the external ATS
  platformUserId    String   // User ID in our platform
  lastSyncedAt      DateTime @default(now())
  syncStatus        String   @default("ACTIVE") // ACTIVE, OUTDATED, ERROR
  mappingData       String?  // JSON field mapping configuration

  integration AtsIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@unique([integrationId, atsCandidateId])
  @@unique([integrationId, platformUserId])
}

model JobSource {
  id          String   @id @default(cuid())
  name        String   // e.g., "LinkedIn", "Indeed", "Glassdoor"
  baseUrl     String   // Base URL for scraping
  isActive    Boolean  @default(true)
  rateLimit   Int      @default(1000) // Requests per hour
  lastScraped DateTime?
  totalJobs   Int      @default(0)
  config      String?  // JSON configuration for scraping
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  scrapingJobs Job[] @relation("JobScrapingSource")
  scrapingSessions ScrapingSession[]
  queue JobScrapingQueue[]
}

model ScrapingSession {
  id            String   @id @default(cuid())
  sourceId      String
  status        String   @default("PENDING") // PENDING, RUNNING, COMPLETED, FAILED
  jobsFound     Int      @default(0)
  jobsCreated   Int      @default(0)
  jobsUpdated   Int      @default(0)
  jobsFailed    Int      @default(0)
  errorMessage  String?
  startedAt     DateTime @default(now())
  completedAt   DateTime?
  metadata      String?  // JSON metadata about the session
  createdBy     String   // User who initiated the scraping

  source JobSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  creator User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model JobScrapingQueue {
  id          String   @id @default(cuid())
  sourceId    String
  url         String   // URL to scrape
  priority    Int      @default(0)
  status      String   @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  attempts    Int      @default(0)
  maxAttempts Int      @default(3)
  scheduledFor DateTime @default(now())
  processedAt DateTime?
  error       String?
  metadata    String?  // JSON metadata for scraping context
  createdBy   String   // User who created the queue item

  source JobSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  creator User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model Experience {
  id          String   @id @default(cuid())
  userId      String
  title       String
  company     String
  location    String?
  isCurrent   Boolean  @default(false)
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
  id          String   @id @default(cuid())
  userId      String
  institution String
  degree      String
  fieldOfStudy String?
  startDate   DateTime
  endDate     DateTime?
  grade       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique // IP address or user ID
  count     Int      @default(1)
  windowStart DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailQueue {
  id          String   @id @default(cuid())
  to          String
  subject     String
  html        String
  status      String @default("PENDING")
  scheduledFor DateTime @default(now())
  sentAt      DateTime?
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BackupLog {
  id        String   @id @default(cuid())
  fileName  String
  filePath  String?
  fileSize  Int?
  status    String @default("SUCCESS")
  error     String?
  createdAt DateTime @default(now())
}

model UserConsent {
  id        String   @id @default(cuid())
  userId    String
  type      String @default("TERMS")
  version   String
  granted   Boolean  @default(false)
  grantedAt DateTime @default(now())
  ipAddress String
  userAgent String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
}

model GDPRRequest {
  id          String   @id @default(cuid())
  userId      String
  type        String @default("DATA_EXPORT")
  status      String @default("PENDING")
  downloadUrl String?
  error       String?
  requestedAt DateTime @default(now())
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JobQueue {
  id          String   @id @default(cuid())
  type        String
  data        String   // JSON string
  priority    Int      @default(0)
  attempts    Int      @default(0)
  maxAttempts Int      @default(3)
  status      String @default("PENDING")
  scheduledFor DateTime @default(now())
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  userId    String?
  eventType String
  eventName String
  properties String? // JSON string
  sessionId String?
  ipAddress String?
  userAgent String?
  url       String?
  referrer  String?
  timestamp DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Document {
  id            String   @id @default(cuid())
  title         String
  content       String   @default("")
  authorId      String
  isPublic      Boolean  @default(false)
  collaborators String   @default("[]") // JSON array of user IDs
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model GeneratedURL {
  id        String   @id @default(cuid())
  userId    String
  slug      String   @unique
  type      String   @default("profile") // profile, portfolio, resume, custom
  isActive  Boolean  @default(true)
  clickCount Int     @default(0)
  expiresAt DateTime?
  metadata  String?  // JSON string for additional data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JobSource {
  id          String   @id @default(cuid())
  name        String   @unique
  baseUrl     String
  rateLimit   Int      @default(1000) // milliseconds between requests
  config      String?  // JSON configuration for scraping
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  scrapingJobs    ScrapingJob[]
  scrapingSessions ScrapingSession[]
  queue           JobQueue[]
}

model ScrapingJob {
  id          String   @id @default(cuid())
  sourceId    String
  url         String
  status      String   @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  data        String?  // JSON scraped data
  error       String?
  retryCount  Int      @default(0)
  maxRetries  Int      @default(3)
  scheduledFor DateTime @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  source ScrapingSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)
}

model ScrapingSession {
  id          String   @id @default(cuid())
  sourceId    String
  status      String   @default("ACTIVE") // ACTIVE, COMPLETED, FAILED
  jobsProcessed Int    @default(0)
  jobsSucceeded Int    @default(0)
  jobsFailed    Int    @default(0)
  startedAt   DateTime @default(now())
  completedAt DateTime?
  createdAt   DateTime @default(now())

  source ScrapingSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)
}

model ScrapingSource {
  id          String   @id @default(cuid())
  name        String   @unique
  baseUrl     String
  rateLimit   Int      @default(1000) // milliseconds between requests
  config      String?  // JSON configuration for scraping
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  scrapingJobs    ScrapingJob[]
  scrapingSessions ScrapingSession[]
}
