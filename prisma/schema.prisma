// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  bio           String?
  title         String?   // headline
  company       String?
  location      String?
  website       String?
  skills        String[]  // Array of skill strings
  avatar        String?   // profile picture URL
  summary       String?   // professional summary
  socialLinks   Json?     // JSON object for social media links
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts              Account[]
  sessions              Session[]
  posts                 Post[]
  likes                 Like[]
  comments              Comment[]
  sentConnections       Connection[] @relation("ConnectionSender")
  receivedConnections   Connection[] @relation("ConnectionReceiver")
  jobs                  Job[]
  applications          Application[]
  sentMessages          Message[] @relation("MessageSender")
  receivedMessages      Message[] @relation("MessageReceiver")
  notifications         Notification[]
  experiences           Experience[]
  education             Education[]
  shares                Share[]
  refreshTokens         RefreshToken[]
  consents              UserConsent[]
  gdprRequests          GDPRRequest[]
  analyticsEvents       AnalyticsEvent[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String   @id @default(cuid())
  content   String
  image     String?
  video     String?
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes    Like[]
  comments Comment[]
  shares   Share[]
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  postId    String
  parentId  String?  // For nested comments
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")
}

model Share {
  id     String @id @default(cuid())
  userId String
  postId String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Connection {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  status     ConnectionStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender   User @relation("ConnectionSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ConnectionReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model Job {
  id          String   @id @default(cuid())
  title       String
  description String
  company     String
  location    String
  type        JobType
  salaryMin   Int?
  salaryMax   Int?
  requirements String[] // Array of requirement strings
  benefits    String?
  authorId    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author       User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  applications Application[]
}

model Application {
  id        String   @id @default(cuid())
  userId    String
  jobId     String
  resume    String?  // URL to uploaded resume
  coverLetter String?
  status    ApplicationStatus @default(PENDING)
  appliedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
}

model Message {
  id         String   @id @default(cuid())
  content    String
  senderId   String
  receiverId String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  sender   User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Notification {
  id      String   @id @default(cuid())
  userId  String
  type    NotificationType
  title   String
  message String
  isRead  Boolean  @default(false)
  data    Json?    // Additional data for the notification
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id          String   @id @default(cuid())
  userId      String
  title       String
  company     String
  location    String?
  isCurrent   Boolean  @default(false)
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
  id          String   @id @default(cuid())
  userId      String
  institution String
  degree      String
  fieldOfStudy String?
  startDate   DateTime
  endDate     DateTime?
  grade       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique // IP address or user ID
  count     Int      @default(1)
  windowStart DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailQueue {
  id          String   @id @default(cuid())
  to          String
  subject     String
  html        String
  status      EmailStatus @default(PENDING)
  scheduledFor DateTime @default(now())
  sentAt      DateTime?
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BackupLog {
  id        String   @id @default(cuid())
  fileName  String
  filePath  String?
  fileSize  Int?
  status    BackupStatus
  error     String?
  createdAt DateTime @default(now())
}

model UserConsent {
  id        String   @id @default(cuid())
  userId    String
  type      ConsentType
  version   String
  granted   Boolean  @default(false)
  grantedAt DateTime @default(now())
  ipAddress String
  userAgent String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
}

model GDPRRequest {
  id          String   @id @default(cuid())
  userId      String
  type        GDPRRequestType
  status      RequestStatus @default(PENDING)
  downloadUrl String?
  error       String?
  requestedAt DateTime @default(now())
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JobQueue {
  id          String   @id @default(cuid())
  type        String
  data        String   // JSON string
  priority    Int      @default(0)
  attempts    Int      @default(0)
  maxAttempts Int      @default(3)
  status      QueueStatus @default(PENDING)
  scheduledFor DateTime @default(now())
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  userId    String?
  eventType String
  eventName String
  properties String? // JSON string
  sessionId String?
  ipAddress String?
  userAgent String?
  url       String?
  referrer  String?
  timestamp DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  INTERVIEWED
  ACCEPTED
  REJECTED
}

enum NotificationType {
  LIKE
  COMMENT
  SHARE
  CONNECTION_REQUEST
  CONNECTION_ACCEPTED
  JOB_APPLICATION
  MESSAGE
  MENTION
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
}

enum BackupStatus {
  SUCCESS
  FAILED
  RESTORED
}

enum ConsentType {
  TERMS
  PRIVACY
  MARKETING
  ANALYTICS
  COOKIES
}

enum GDPRRequestType {
  DATA_EXPORT
  DATA_DELETION
  DATA_RECTIFICATION
  DATA_PORTABILITY
}

enum RequestStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum QueueStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
