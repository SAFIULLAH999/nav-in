// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums as strings for SQLite compatibility
// ConnectionStatus: PENDING, ACCEPTED, BLOCKED
// JobType: FULL_TIME, PART_TIME, CONTRACT, INTERNSHIP, FREELANCE, TEMPORARY

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String    // Hashed password for authentication
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  bio           String?
  title         String?   // headline
  company       String?
  location      String?
  website       String?
  skills        String?   // JSON string of skill strings
  avatar        String?   // profile picture URL
  summary       String?   // professional summary
  socialLinks   String?   // JSON string for social media links
  role          String    @default("USER") // User role for authorization
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts              Account[]
  sessions              Session[]
  posts                 Post[]
  likes                 Like[]
  comments              Comment[]
  sentConnections       Connection[] @relation("ConnectionSender")
  receivedConnections   Connection[] @relation("ConnectionReceiver")
  following             Follow[] @relation("FollowFollowing")
  followers             Follow[] @relation("FollowFollower")
  jobs                  Job[]
  applications          Application[]
  sentMessages          Message[] @relation("MessageSender")
  receivedMessages      Message[] @relation("MessageReceiver")
  notifications         Notification[]
  experiences           Experience[]
  education             Education[]
  shares                Share[]
  refreshTokens         RefreshToken[]
  consents              UserConsent[]
  gdprRequests          GDPRRequest[]
  analyticsEvents       AnalyticsEvent[]
  companyPosts          CompanyPost[]
  companyMemberships    CompanyEmployee[]
  passwordResetTokens   PasswordResetToken[]
  userSkills            UserSkill[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, token])
}

model Skill {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String?  // e.g., "Technical", "Soft Skills", "Language"
  createdAt   DateTime @default(now())

  // Relations
  userSkills UserSkill[]
}

model UserSkill {
  id        String   @id @default(cuid())
  userId    String
  skillId   String
  level     String   @default("INTERMEDIATE") // BEGINNER, INTERMEDIATE, ADVANCED, EXPERT
  createdAt DateTime @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)

  // Relations
  givenEndorsements   Endorsement[] @relation("EndorsementGiver")
  receivedEndorsements Endorsement[] @relation("EndorsementReceiver")

  @@unique([userId, skillId])
}

model Endorsement {
  id          String   @id @default(cuid())
  giverId     String   // User who gave the endorsement
  receiverId  String   // User who received the endorsement
  skillId     String   // Which skill was endorsed
  message     String?  // Optional message with endorsement
  createdAt   DateTime @default(now())

  giver    UserSkill @relation("EndorsementGiver", fields: [giverId], references: [id], onDelete: Cascade)
  receiver UserSkill @relation("EndorsementReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([giverId, receiverId, skillId])
}

model PostAnalytics {
  id            String   @id @default(cuid())
  postId        String   @unique
  impressions   Int      @default(0)
  views         Int      @default(0)
  likes         Int      @default(0)
  comments      Int      @default(0)
  shares        Int      @default(0)
  engagementRate Float   @default(0)
  lastUpdated   DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Post {
  id        String   @id @default(cuid())
  content   String
  image     String?
  video     String?
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author      User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes       Like[]
  comments    Comment[]
  shares      Share[]
  analytics   PostAnalytics?
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  postId    String
  parentId  String?  // For nested comments
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")
}

model Share {
  id     String @id @default(cuid())
  userId String
  postId String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Connection {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  status     String @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender   User @relation("ConnectionSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ConnectionReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String   // User who is following
  followingId String   // User being followed
  createdAt   DateTime @default(now())

  follower  User @relation("FollowFollower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("FollowFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Company {
  id          String   @id @default(cuid())
  name        String
  description String?
  website     String?
  logo        String?   // Company logo URL
  industry    String?
  size        String?   // Company size (startup, SMB, enterprise)
  location    String?
  foundedYear Int?
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employees   CompanyEmployee[]
  jobs        Job[]
  posts       CompanyPost[]
}

model CompanyEmployee {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  role      String   // Job title/role at company
  isAdmin   Boolean  @default(false) // Can manage company page
  joinedAt  DateTime @default(now())
  leftAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
}

model Job {
  id           String   @id @default(cuid())
  title        String
  description  String
  companyName  String   // Company name (denormalized for search)
  location     String
  type         String   @default("FULL_TIME")
  salaryMin    Int?
  salaryMax    Int?
  requirements String?  // JSON string of requirement strings
  benefits     String?
  skills       String?  // JSON string of required skills
  experience   String?  // Experience level required
  authorId     String   // Recruiter who posted
  companyId    String?  // Associated company page (optional)
  isActive     Boolean  @default(true)
  isRemote     Boolean  @default(false)
  applicationDeadline DateTime?
  views        Int      @default(0)
  applicationsCount Int @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  author       User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  company      Company?      @relation(fields: [companyId], references: [id], onDelete: SetNull)
  applications Application[]
}

model CompanyPost {
  id        String   @id @default(cuid())
  content   String
  image     String?
  video     String?
  companyId String
  authorId  String   // Employee who posted
  likes     Int      @default(0)
  comments  Int      @default(0)
  shares    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  author  User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Application {
  id        String   @id @default(cuid())
  userId    String
  jobId     String
  resume    String?  // URL to uploaded resume
  coverLetter String?
  status    String @default("PENDING")
  appliedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
}

model Message {
  id         String   @id @default(cuid())
  content    String
  senderId   String
  receiverId String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  sender   User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Notification {
  id      String   @id @default(cuid())
  userId  String
  type    String @default("LIKE")
  title   String
  message String
  isRead  Boolean  @default(false)
  data    String?   // JSON string for additional data for the notification
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id          String   @id @default(cuid())
  userId      String
  title       String
  company     String
  location    String?
  isCurrent   Boolean  @default(false)
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
  id          String   @id @default(cuid())
  userId      String
  institution String
  degree      String
  fieldOfStudy String?
  startDate   DateTime
  endDate     DateTime?
  grade       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique // IP address or user ID
  count     Int      @default(1)
  windowStart DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailQueue {
  id          String   @id @default(cuid())
  to          String
  subject     String
  html        String
  status      String @default("PENDING")
  scheduledFor DateTime @default(now())
  sentAt      DateTime?
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BackupLog {
  id        String   @id @default(cuid())
  fileName  String
  filePath  String?
  fileSize  Int?
  status    String @default("SUCCESS")
  error     String?
  createdAt DateTime @default(now())
}

model UserConsent {
  id        String   @id @default(cuid())
  userId    String
  type      String @default("TERMS")
  version   String
  granted   Boolean  @default(false)
  grantedAt DateTime @default(now())
  ipAddress String
  userAgent String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
}

model GDPRRequest {
  id          String   @id @default(cuid())
  userId      String
  type        String @default("DATA_EXPORT")
  status      String @default("PENDING")
  downloadUrl String?
  error       String?
  requestedAt DateTime @default(now())
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JobQueue {
  id          String   @id @default(cuid())
  type        String
  data        String   // JSON string
  priority    Int      @default(0)
  attempts    Int      @default(0)
  maxAttempts Int      @default(3)
  status      String @default("PENDING")
  scheduledFor DateTime @default(now())
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  userId    String?
  eventType String
  eventName String
  properties String? // JSON string
  sessionId String?
  ipAddress String?
  userAgent String?
  url       String?
  referrer  String?
  timestamp DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}
